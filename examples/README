hello_world.cc
  Simple hello-world program.  Initializes the message passing
  environment and determines the number of processes and rank.  

blocking.cc
  Demonstrates various blocking send and receive modes of standard
  data types.

blocking_vector.cc
  Demonstrates blocking send and receive of a vector of standard data
  types. 

nonblocking.cc
  Demonstrates nonblocking send and receive of standard data types and
  vectors of standard data types and different waiting methods.

nonblocking_mult.cc 
  Utilizes nonblocking send and receive of standard data types to
  implement a gather operation.

standard_types.cc
  Sends and recieves data of various standard types.

arrays.cc
  Sends and recieves arrays (C arrays ans std::array) of fixed size,
  which must be known at compile time.  The types of the array
  elements musst be suited for communication.  These rules may be
  applied recursively.

struct.cc
  Demonstrates how to use class mpl::struct_builder to enable
  communication using structures and classes.  Class members must be
  of fixed size (no dynamic memory allocation).  All types of the
  class members must be suited for communication.  These rules may be
  applied recursively.
 
collective.cc
  Demonstrates various modes of collective communication.

gather.cc
  Gather data to a signle process.

reduce_lcm.cc
  Demonstrates use of custom reduction functions.

layouts.cc and subarray.cc
  Construction of various data layouts.

matrix_gather.cc 
  Gather submatrices, demonstrates use of subarray data layouts and
  alltoallw.

vibrating_string_mpi.c and vibrating_string_mpl.cc
  Solve one-dimensional wave equatiion via finite differences, MPI
  version vs. MPL version.
